@use "sass:math";

// Remove-px
@function remove-px($target) {
    @if not unitless($target) {
        @return math.div($target, 1px);
    }

    @else {
        @return $target;
    }
}

// Calculate REM
@function rem($size) {
    $values: ();

    @if type-of($size)==list {
        @each $current in $size {
            $values: append($values, math.div(remove-px($size), 16) * 1rem);
        }
    }

    @else {
        $values: math.div(remove-px($size), 16) * 1rem;
    }

    @return $values;
}
// REM font-size and line-height
@mixin rem-typo($font) {
    font-size: rem($font);
}

// Visuallyhidden
@mixin visuallyhidden($hide: true) {
    @if $hide ==true {
        position: absolute;
        overflow: hidden;
        clip: rect(0 0 0 0);
        width: 1px;
        height: 1px;
        margin: -1px;
        padding: 0;
        border: 0;
    }

    @else {
        position: static;
        overflow: visible;
        clip: auto;
        width: auto;
        height: auto;
        margin: 0;
    }
}

// Breakpoints
@mixin breakpoint-min($bp) {
    @media (min-width: $bp) {
        @content;
    }
}

@mixin breakpoint-max($bp) {
    @media (max-width: $bp) {
        @content;
    }
}

@mixin breakpoint-min-max($bp1, $bp2) {
    @media (min-width: $bp1) and (max-width: $bp2) {
        @content;
    }
}